---
import Section from "./Section.astro";
import priceData from "../../data/priceDats.json";
import Card from "../ui/Card.astro";

// Countdown logic
const today = new Date();
const day = today.getDate();
let showCountdown = false;
let daysLeft = 0;
if (day >= 1 && day <= 14) {
  showCountdown = true;
  daysLeft = 14 - day + 1;
}

// Helper to get bootcamp price based on day (1-14)
function getBootcampPrice(day: number) {
  // Price points: 20jt, 20.5jt, 21jt, 21.5jt, 22jt, 22.5jt, 23jt, 23.5jt, 24jt, 24.5jt, 25jt
  // Days 1-2: 20jt, 3-4: 20.5jt, 5-6: 21jt, 7-8: 21.5jt, 9: 22jt, 10: 22.5jt, 11: 23jt, 12: 23.5jt, 13: 24jt, 14: 24.5jt
  if (day < 1) return "20jt";
  if (day > 14) return "25jt";
  let price = 20;
  if (day <= 2) price = 20;
  else if (day <= 4) price = 20.5;
  else if (day <= 6) price = 21;
  else if (day <= 8) price = 21.5;
  else if (day === 9) price = 22;
  else if (day === 10) price = 22.5;
  else if (day === 11) price = 23;
  else if (day === 12) price = 23.5;
  else if (day === 13) price = 24;
  else if (day === 14) price = 24.5;
  return price.toString().replace('.0','') + "jt";
}
---

<Section id="contact">
  <div class="mt-10 mb-5 relative bluehead lg:p-10 rounded-3xl shadow-[0px_5px_0px_#191a23]">
    <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-3">
        <div class="mx-auto max-w-screen-md text-center mb-8 lg:mb-12">
            <h2 class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900">Biaya Pendidikan</h2>
            <p class="mb-5 font-light text-gray-500 sm:text-xl">Kampus RWID memberlakukan biaya yang sama untuk tiap bidang peminatan. Berikut adalah informasi detail tentang biaya pendidikan yang berlaku untuk setiap program yang kami tawarkan.</p>
            {showCountdown && (
                <div class="flex flex-col items-center px-6 py-5 rounded-xl bg-gradient-to-r from-blue-400 to-blue-600 shadow-lg text-white font-mono text-lg font-bold tracking-widest border-2 border-blue-700" >
                    <p class="mb-2 text-xl font-bold">Diskon<sup>*</sup> akan berakhir dalam:</p>
                    <div class="my-4 flex justify-center">
                        <div class="flex items-center gap-2 ">
                        <svg class="w-6 h-6 mr-2 text-white opacity-80" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none"/>
                            <path stroke="currentColor" stroke-width="2" stroke-linecap="round" d="M12 6v6l4 2"/>
                        </svg>
                        <span id="countdown-timer"></span>
                        </div>
                        <script is:inline>
                        // Calculate the end date (14th of this month at 23:59:59)
                        const now = new Date();
                        const end = new Date(now.getFullYear(), now.getMonth(), 14, 23, 59, 59);

                        function updateCountdown() {
                            const now = new Date();
                            let diff = end - now;
                            if (diff < 0) diff = 0;
                            const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                            const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
                            const minutes = Math.floor((diff / (1000 * 60)) % 60);
                            const seconds = Math.floor((diff / 1000) % 60);
                            document.getElementById('countdown-timer').innerHTML =
                            `<span class='text-2xl font-extrabold text-yellow-200'>${days}</span><span class='text-sm text-white font-normal'> hari</span> : ` +
                            `<span class='text-2xl font-extrabold text-yellow-200'>${hours.toString().padStart(2, '0')}</span><span class='text-sm text-white font-normal'> jam</span> : ` +
                            `<span class='text-2xl font-extrabold text-yellow-200'>${minutes.toString().padStart(2, '0')}</span><span class='text-sm text-white font-normal'> menit</span> : ` +
                            `<span class='text-2xl font-extrabold text-yellow-200'>${seconds.toString().padStart(2, '0')}</span><span class='text-sm text-white font-normal'> detik</span>`;
                        }
                        updateCountdown();
                        setInterval(updateCountdown, 1000);
                        </script>
                    </div>
                    <p class="mb-2 text-sm tracking-normal font-light italic"><sup>*</sup>) Harga akan terus naik setiap hari secara otomatis</p>
              </div>
            )}
        </div>
        <div class="space-y-8 lg:grid lg:grid-cols-2 sm:gap-6 xl:gap-10 lg:space-y-0">
            <!-- Pricing Card -->
            {
            priceData.map((item) => {
            const isBootcamp = item.title.toLowerCase().includes("bootcamp remote work");
            let dynamicPrice = item.price;
            let dynamicDiscount = item.price;
            if (isBootcamp) {
                dynamicPrice = getBootcampPrice(day)
            }
            return (
            <Card isUnderline>
            <div class="flex flex-col p-6 mx-auto max-w-lg text-center text-black h-full">
                <h3 class="mb-4 text-2xl font-semibold">{item.title}</h3>
                <p class="font-light text-gray-500 sm:text-lg">{item.description}</p>
                <div class="flex justify-center items-center my-8 lg:min-h-36">
                    <span class="mr-2 text-5xl font-extrabold">{
                        isBootcamp
                          ? <div><span class="line-through opacity-50">&nbsp;{dynamicDiscount}&nbsp;</span><br/>{dynamicPrice}</div>
                          : dynamicPrice
                        }
                    </span>
                    {
                        item.recurring && (
                            <span class="text-gray-500">/{item.item}</span>
                        )
                    }
                </div>
                <ul role="list" class="mb-8 space-y-4 text-left">
                    { item.features.map((feature) => (
                        <li class="flex items-center space-x-3">
                        <svg class="flex-shrink-0 w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
                        <span>{feature}</span>
                    </li>
                        ))
                        }
                </ul>
                <div class="grow"></div>
                <a href={item.link} class="text-white hover:text-white bg-blue hover:bg-black focus:ring-4 focus:ring-blue-200 font-medium rounded-full px-5 py-5 text-center shadow-[0px_5px_0px_#191a23]">{item.action}</a>
            </div>
            </Card>
            );
            })
            }
        </div>
    </div>
  </div>
</Section>
